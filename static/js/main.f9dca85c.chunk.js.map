{"version":3,"sources":["components/ColorPaletteView/ColorPaletteView.js","components/SortableColorInputView/SortableColorInputView.js","components/AddColor/AddColor.js","components/DownloadColors/DownloadColors.js","components/utils/getArrayFromHash.js","App.js","serviceWorker.js","index.js"],"names":["ColorPaletteView","_this","this","colors","props","react_default","a","createElement","className","ReactKonva","width","height","ref","e","stage","map","data","index","x","y","length","key","fill","color","hex","text","Color","isDark","lighten","rotate","saturate","darken","fontSize","fontFamily","fontStyle","Component","defaultProps","DragHandle","SortableHandle","SortableItem","SortableElement","_ref","value","onChange","onDelete","type","defaultValue","val","currentTarget","colorString","get","onClick","SortableList","SortableContainer","_ref2","items","concat","SortableColorInputView","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSortEnd","bind","assertThisInitialized","oldIndex","_ref3","newIndex","arrayMove","_this2","lockAxis","useDragHandle","lockToContainerEdges","splice","AddColor","onAddColor","DownloadColors","uri","name","link","document","download","href","body","appendChild","click","removeChild","downloadURI","toDataURL","Date","getColorsFromHash","window","location","hash","colorJson","JSON","parse","decodeURI","replace","constructor","Array","console","log","App","state","stringify","d","style","marginLeft","react_github_btn","data-show-count","aria-label","SortableColorInputView_SortableColorInputView","setState","AddColor_AddColor","s","push","Konva","Util","getRandomColor","DownloadColors_DownloadColors","colorpaletteview","ColorPaletteView_ColorPaletteView","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9dca85c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Stage,\r\n  Layer,\r\n  Rect,\r\n  Text,\r\n  Group\r\n} from \"react-konva\";\r\nimport Color from \"color\";\r\n\r\nexport default class ColorPaletteView extends Component {\r\n  static defaultProps = {\r\n    colors: []\r\n  };\r\n  render() {\r\n    let colors = this.props.colors;\r\n    return (\r\n      <div className=\"canvas\">\r\n        <Stage\r\n          width={1080}\r\n          height={1920}\r\n          ref={e => (this.stage = e)}\r\n        >\r\n          <Layer>\r\n            {colors.map((data, index) => {\r\n              return (\r\n                <Group\r\n                  x={0}\r\n                  y={\r\n                    index * (1920 / colors.length)\r\n                  }\r\n                  key={index}\r\n                >\r\n                  <Rect\r\n                    x={0}\r\n                    y={0}\r\n                    width={1080}\r\n                    height={1920 / colors.length}\r\n                    fill={data.color.hex()}\r\n                  />\r\n                  <Text\r\n                    text={data.color.hex()}\r\n                    fill={Color(\r\n                      data.color.isDark()\r\n                        ? data.color\r\n                            .lighten(0.6)\r\n                            .rotate(-10)\r\n                            .saturate(0.5)\r\n                        : data.color\r\n                            .darken(0.6)\r\n                            .rotate(10)\r\n                            .saturate(0.5)\r\n                    ).hex()}\r\n                    fontSize={50}\r\n                    fontFamily=\"Open Sans\"\r\n                    fontStyle=\"bolder\"\r\n                    x={100}\r\n                    y={\r\n                      1920 / colors.length / 2 -\r\n                      20\r\n                    }\r\n                  />\r\n                </Group>\r\n              );\r\n            })}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  SortableContainer,\r\n  SortableElement,\r\n  SortableHandle\r\n} from \"react-sortable-hoc\";\r\nimport Color from \"color\";\r\nimport colorString from \"color-string\";\r\nimport arrayMove from \"array-move\";\r\n\r\nconst DragHandle = SortableHandle(() => (\r\n  <span>\r\n    <i className=\"material-icons\">drag_handle</i>\r\n  </span>\r\n));\r\n\r\nconst SortableItem = SortableElement(\r\n  ({ value, index, onChange, onDelete }) => (\r\n    <div className=\"sortablecoloritem\">\r\n      <input\r\n        type=\"text\"\r\n        defaultValue={value.color.hex()}\r\n        onChange={e => {\r\n          let val = e.currentTarget.value;\r\n          if (colorString.get(val) !== null) {\r\n            onChange(val, index);\r\n          }\r\n        }}\r\n      />\r\n      <span\r\n        onClick={() => {\r\n          onDelete(index);\r\n        }}\r\n      >\r\n        <i className=\"material-icons\">delete</i>\r\n      </span>\r\n      <DragHandle />\r\n    </div>\r\n  )\r\n);\r\n\r\nconst SortableList = SortableContainer(\r\n  ({ items, onChange, onDelete }) => {\r\n    return (\r\n      <div>\r\n        {items.map((value, index) => (\r\n          <SortableItem\r\n            key={`item-${index}`}\r\n            index={index}\r\n            value={value}\r\n            onChange={(value, index) => {\r\n              onChange(value, index);\r\n            }}\r\n            onDelete={index => {\r\n              onDelete(index);\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default class SortableColorInputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onSortEnd = this.onSortEnd.bind(this);\r\n  }\r\n\r\n  static defaultProps = {\r\n    colors: [],\r\n    onChange: () => {}\r\n  };\r\n\r\n  onSortEnd({ oldIndex, newIndex }) {\r\n    this.props.onChange(\r\n      arrayMove(\r\n        this.props.colors,\r\n        oldIndex,\r\n        newIndex\r\n      )\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <SortableList\r\n        items={this.props.colors}\r\n        onSortEnd={this.onSortEnd}\r\n        lockAxis=\"y\"\r\n        useDragHandle={true}\r\n        lockToContainerEdges={true}\r\n        onChange={(value, index) => {\r\n          this.props.colors[index].color = Color(\r\n            value\r\n          );\r\n          this.props.onChange(this.props.colors);\r\n        }}\r\n        onDelete={index => {\r\n          this.props.colors.splice(index, 1);\r\n          this.props.onChange(this.props.colors);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class AddColor extends Component {\r\n  static defaultProps = {\r\n    onAddColor: () => {}\r\n  };\r\n  render() {\r\n    return (\r\n      <span\r\n        className=\"buttonswithicon\"\r\n        onClick={() => {\r\n          this.props.onAddColor();\r\n        }}\r\n      >\r\n        <i className=\"material-icons\">add</i>Add\r\n        Color\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class DownloadColors extends Component {\r\n  render() {\r\n    return (\r\n      <span\r\n        className=\"buttonswithicon\"\r\n        onClick={() => {\r\n          let downloadURI = (uri, name) => {\r\n            var link = document.createElement(\r\n              \"a\"\r\n            );\r\n            link.download = name;\r\n            link.href = uri;\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n          };\r\n\r\n          var dataURL = this.props\r\n            .stage()\r\n            .toDataURL();\r\n          downloadURI(\r\n            dataURL,\r\n            `${new Date()}.png`\r\n          );\r\n        }}\r\n      >\r\n        <i className=\"material-icons\">save_alt</i>\r\n        Download\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import Color from \"color\";\r\nexport let getColorsFromHash = () => {\r\n  if (window.location.hash.length) {\r\n    try {\r\n      let colorJson = JSON.parse(\r\n        decodeURI(window.location.hash).replace(\r\n          \"#\",\r\n          \"\"\r\n        )\r\n      );\r\n\r\n      if (colorJson.constructor === Array) {\r\n        return colorJson.map(data => {\r\n          return {\r\n            color: Color(`#${data}`)\r\n          };\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"failed to parse color json\");\r\n    }\r\n  }\r\n\r\n  return [];\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Konva from \"konva\";\r\nimport Color from \"color\";\r\n\r\nimport ColorPaletteView from \"./components/ColorPaletteView/ColorPaletteView\";\r\nimport SortableColorInputView from \"./components/SortableColorInputView/SortableColorInputView\";\r\nimport AddColor from \"./components/AddColor/AddColor\";\r\nimport DownloadColors from \"./components/DownloadColors/DownloadColors\";\r\nimport { getColorsFromHash } from \"./components/utils/getArrayFromHash\";\r\nimport GitHubButton from \"react-github-btn\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      colors: getColorsFromHash()\r\n    };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    window.location.hash = JSON.stringify(\r\n      this.state.colors.map(d =>\r\n        d.color.hex().replace(\"#\", \"\")\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"header\">\r\n          <i className=\"material-icons\">\r\n            color_lens\r\n          </i>\r\n          Color Palette Maker{\" \"}\r\n          <span\r\n           style={{\r\n              marginLeft: \"15px\"\r\n            }}\r\n          >\r\n          <GitHubButton\r\n            href=\"https://github.com/virat21/colorpalettemaker\"\r\n            data-show-count=\"true\"\r\n            aria-label=\"Star virat21/colorpalettemaker on GitHub\"\r\n           \r\n          >\r\n            Star\r\n          </GitHubButton>\r\n          </span>\r\n          \r\n        </div>\r\n        <div className=\"bottom\">\r\n          <div className=\"sidebar\">\r\n            <div className=\"sortableColors\">\r\n              <SortableColorInputView\r\n                colors={this.state.colors}\r\n                onChange={colors => {\r\n                  this.setState({ colors });\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"buttonsPanel\">\r\n              <AddColor\r\n                onAddColor={() => {\r\n                  this.setState(s => {\r\n                    s.colors.push({\r\n                      color: Color(\r\n                        Konva.Util.getRandomColor()\r\n                      )\r\n                    });\r\n\r\n                    return { colors: s.colors };\r\n                  });\r\n                }}\r\n              />\r\n\r\n              <DownloadColors\r\n                stage={() =>\r\n                  this.colorpaletteview.stage\r\n                }\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"mainContent\">\r\n            <ColorPaletteView\r\n              colors={this.state.colors}\r\n              ref={e =>\r\n                (this.colorpaletteview = e)\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}